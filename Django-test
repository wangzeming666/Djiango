Writing our first test¶

We identify a bug¶

Fortunately, there’s a little bug in the polls application for us to fix right away: 
the Question.was_published_recently() method returns True if the Question was published within the last day (which is correct) but
also if the Question’s pub_date field is in the future (which certainly isn’t).

To check if the bug really exists, using the Admin create a question whose date lies in the future and check the method using the shell:

>>> import datetime
>>> from django.utils import timezone
>>> from polls.models import Question
>>> # create a Question instance with pub_date 30 days in the future
>>> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
>>> # was it published recently?
>>> future_question.was_published_recently()
True
Since things in the future are not ‘recent’, this is clearly wrong.

Create a test to expose the bug¶

What we’ve just done in the shell to test for the problem is exactly what we can do in an automated test, 
so let’s turn that into an automated test.

A conventional place for an application’s tests is in the application’s tests.py file; 
the testing system will automatically find tests in any file whose name begins with test.

Put the following in the tests.py file in the polls application:

polls/tests.py
import datetime

from django.utils import timezone
from django.test import TestCase

from .models import Question


class QuestionModelTests(TestCase):

    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)
        
        
What we have done here is created a django.test.
TestCase subclass with a method that creates a Question instance with a pub_date in the future. 
We then check the output of was_published_recently() - which ought to be False.

Running tests¶

In the terminal, we can run our test:

$ python manage.py test polls
and you’ll see something like:

Creating test database for alias 'default'...
System check identified no issues (0 silenced).
F
======================================================================
FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/path/to/mysite/polls/tests.py", line 16, in test_was_published_recently_with_future_question
    self.assertIs(future_question.was_published_recently(), False)
AssertionError: True is not False

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
Destroying test database for alias 'default'...
What happened is this:

python manage.py test polls looked for tests in the polls application
it found a subclass of the django.test.TestCase class
it created a special database for the purpose of testing
it looked for test methods - ones whose names begin with test
in test_was_published_recently_with_future_question it created a Question instance whose pub_date field is 30 days in the future
… and using the assertIs() method, it discovered that its was_published_recently() returns True, though we wanted it to return False
The test informs us which test failed and even the line on which the failure occurred.

Fixing the bug¶

We already know what the problem is: Question.was_published_recently() should return False if its pub_date is in the future.
Amend the method in models.py, so that it will only return True if the date is also in the past:

polls/models.py
def was_published_recently(self):
    now = timezone.now()
    return now - datetime.timedelta(days=1) <= self.pub_date <= now
and run the test again:

Creating test database for alias 'default'...
System check identified no issues (0 silenced).
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
Destroying test database for alias 'default'...
After identifying a bug, we wrote a test that exposes it and corrected the bug in the code so our test passes.

Many other things might go wrong with our application in the future,
but we can be sure that we won’t inadvertently reintroduce this bug, because simply running the test will warn us immediately. 
We can consider this little portion of the application pinned down safely forever.
